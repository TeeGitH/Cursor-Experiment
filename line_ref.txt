# LINE Chatbot Development with Python Reference

## Table of Contents
1. [Introduction to LINE Messaging API](#introduction-to-line-messaging-api)
2. [Setting Up Development Environment](#setting-up-development-environment)
3. [LINE Bot SDK](#line-bot-sdk)
4. [Creating a LINE Bot](#creating-a-line-bot)
5. [Webhook Setup](#webhook-setup)
6. [Message Handling](#message-handling)
7. [Message Types](#message-types)
8. [Rich Features](#rich-features)
9. [Deployment Options](#deployment-options)
10. [Testing and Debugging](#testing-and-debugging)
11. [Best Practices](#best-practices)
12. [References](#references)

## Introduction to LINE Messaging API

The LINE Messaging API allows developers to build chatbots that interact with users through the LINE messaging platform. These bots can send and receive messages, handle various events, and provide rich interactive experiences.

Key capabilities:
- Send and receive text, images, videos, stickers, and custom messages
- Handle events like follows, unfollows, joins, leaves
- Support for rich menus, button templates, carousel templates
- User authentication and account linking
- Webhooks for real-time interaction

## Setting Up Development Environment

### Prerequisites:
- Python 3.9 or higher
- A LINE developer account
- A secure deployment environment or tunneling service (for development)

### Required tools:
- Python virtual environment (venv, virtualenv)
- LINE Bot SDK
- Web framework (Flask, FastAPI, Django)
- ngrok (for local development)

## LINE Bot SDK

The LINE Messaging API Python SDK makes it easy to develop bots in Python.

### Installation:
```bash
pip install line-bot-sdk
```

### SDK Version
The current SDK (as of 2023) is v3.x, which is not backwards compatible with v2.x. It's recommended to use linebot.v3 modules for the latest features.

### Important Components:
- `WebhookHandler`: Processes incoming webhook events
- `MessagingApi`: Sends messages and manages conversations
- `Configuration`: Holds access tokens and settings
- Message objects: Text, Image, Video, etc.
- Event objects: MessageEvent, FollowEvent, etc.

## Creating a LINE Bot

### Steps to create a LINE Bot:
1. Create a provider on LINE Developers Console
2. Create a new channel under the provider (Messaging API)
3. Configure the channel settings
4. Get the Channel Secret and Channel Access Token
5. Set up webhook URL
6. Implement webhook handling in your application

### Example channel creation:
1. Go to https://developers.line.biz/console/
2. Create a provider
3. Create a Messaging API channel
4. Configure the basic settings (name, description, icon)
5. Enable webhook
6. Get the Channel Secret from Basic Settings
7. Issue a Channel Access Token from Messaging API settings

## Webhook Setup

Webhooks allow LINE to send events to your application in real-time.

### Basic webhook flow:
1. User interacts with your LINE bot
2. LINE Platform sends HTTP POST request to your webhook URL
3. Your server validates the signature
4. Your server processes the event
5. Your server responds with HTTP 200 OK

### Signature validation:
```python
import base64
import hashlib
import hmac

channel_secret = '...' # Channel secret string
body = '...' # Request body string
hash = hmac.new(channel_secret.encode('utf-8'),
    body.encode('utf-8'), hashlib.sha256).digest()
signature = base64.b64encode(hash)
# Compare x-line-signature request header and the signature
```

## Message Handling

### Basic Flask application structure:
```python
from flask import Flask, request, abort

from linebot.v3 import (
    WebhookHandler
)
from linebot.v3.exceptions import (
    InvalidSignatureError
)
from linebot.v3.messaging import (
    Configuration,
    ApiClient,
    MessagingApi,
    ReplyMessageRequest,
    TextMessage
)
from linebot.v3.webhooks import (
    MessageEvent,
    TextMessageContent
)

app = Flask(__name__)

configuration = Configuration(access_token='YOUR_CHANNEL_ACCESS_TOKEN')
handler = WebhookHandler('YOUR_CHANNEL_SECRET')

@app.route("/callback", methods=['POST'])
def callback():
    # get X-Line-Signature header value
    signature = request.headers['X-Line-Signature']

    # get request body as text
    body = request.get_data(as_text=True)
    app.logger.info("Request body: " + body)

    # handle webhook body
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        app.logger.info("Invalid signature. Please check your channel access token/channel secret.")
        abort(400)

    return 'OK'

@handler.add(MessageEvent, message=TextMessageContent)
def handle_message(event):
    with ApiClient(configuration) as api_client:
        line_bot_api = MessagingApi(api_client)
        line_bot_api.reply_message_with_http_info(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=event.message.text)]
            )
        )

if __name__ == "__main__":
    app.run()
```

### Event handling using decorators:
```python
@handler.add(MessageEvent, message=TextMessageContent)
def handle_message(event):
    # Do something with the message
    pass

@handler.add(FollowEvent)
def handle_follow(event):
    # Handle new follower
    pass

@handler.default()
def default(event):
    # Handle any unhandled event
    pass
```

## Message Types

LINE supports various message types:

### Text Message:
```python
TextMessage(text="Hello, world!")
```

### Image Message:
```python
ImageMessage(
    original_content_url="https://example.com/original.jpg",
    preview_image_url="https://example.com/preview.jpg"
)
```

### Video Message:
```python
VideoMessage(
    original_content_url="https://example.com/video.mp4",
    preview_image_url="https://example.com/preview.jpg"
)
```

### Audio Message:
```python
AudioMessage(
    original_content_url="https://example.com/audio.m4a",
    duration=60000
)
```

### Location Message:
```python
LocationMessage(
    title="My Location",
    address="1-6-1 Yotsuya, Shinjuku-ku, Tokyo, 160-0004, Japan",
    latitude=35.687574,
    longitude=139.729071
)
```

### Sticker Message:
```python
StickerMessage(
    package_id="446",
    sticker_id="1988"
)
```

## Rich Features

LINE Bot API supports several rich features for interactive experiences:

### Rich Menu:
A customizable menu that appears on the chat screen.
```python
rich_menu = RichMenu(
    size=RichMenuSize(width=2500, height=843),
    selected=False,
    name="Rich Menu 1",
    chat_bar_text="Tap to open",
    areas=[
        RichMenuArea(
            bounds=RichMenuBounds(x=0, y=0, width=1250, height=843),
            action=MessageAction(text="left")
        ),
        RichMenuArea(
            bounds=RichMenuBounds(x=1250, y=0, width=1250, height=843),
            action=MessageAction(text="right")
        )
    ]
)
```

### Template Messages:
Button, Confirm, Carousel, and Image Carousel templates.

#### Button Template:
```python
ButtonsTemplate(
    thumbnail_image_url="https://example.com/image.jpg",
    title="Menu",
    text="Please select",
    actions=[
        MessageAction(label="Yes", text="yes"),
        MessageAction(label="No", text="no")
    ]
)
```

#### Carousel Template:
```python
CarouselTemplate(
    columns=[
        CarouselColumn(
            thumbnail_image_url="https://example.com/item1.jpg",
            title="Item 1",
            text="Description 1",
            actions=[
                MessageAction(label="Select 1", text="select 1")
            ]
        ),
        CarouselColumn(
            thumbnail_image_url="https://example.com/item2.jpg",
            title="Item 2",
            text="Description 2",
            actions=[
                MessageAction(label="Select 2", text="select 2")
            ]
        )
    ]
)
```

### Flex Message:
Highly customizable message layout using JSON.
```python
FlexMessage(
    alt_text="Flex Message",
    contents={
        "type": "bubble",
        "body": {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {
                    "type": "text",
                    "text": "Hello, World!",
                    "size": "xl",
                    "weight": "bold"
                }
            ]
        }
    }
)
```

## Deployment Options

### Local Development with ngrok:
1. Run your application locally (e.g., `python app.py`)
2. Use ngrok to create a public HTTPS URL (`ngrok http 5000`)
3. Set the ngrok URL as your webhook URL in LINE Developers Console

### Cloud Deployment Options:

#### Heroku:
```bash
# Initialize git
git init
git add .
git commit -m "Initial commit"

# Create Heroku app
heroku create
git push heroku master

# Set environment variables
heroku config:set LINE_CHANNEL_SECRET=your_channel_secret
heroku config:set LINE_CHANNEL_ACCESS_TOKEN=your_channel_access_token
```

#### Google Cloud Run:
```bash
# Build and deploy with gcloud
gcloud run deploy linebot-service --source .
```

#### AWS Lambda:
Can be deployed using Serverless Framework or AWS SAM.

## Testing and Debugging

### Local Testing:
- Use ngrok for local development
- Check the ngrok inspection interface at http://localhost:4040
- Use the inspect and replay feature to examine webhook payloads

### Webhook Verification:
- Use the "Verify" button in LINE Developers Console
- Check webhook delivery status in the console

### Debugging Tips:
- Enable logging in your application
- Use the LINE Bot SDK's built-in http info functions for detailed responses
- Check for common issues like invalid signatures or expired tokens

## Best Practices

### Security:
- Always validate webhook signatures
- Keep your channel secret and access token secure
- Use HTTPS for all communications

### Performance:
- Respond to webhooks quickly (within 3 seconds)
- Use asynchronous processing for time-consuming tasks
- Handle webhook events efficiently

### User Experience:
- Keep messages concise and relevant
- Use rich features appropriately
- Provide clear instructions and feedback
- Design for mobile-first experience

### Error Handling:
- Implement proper error handling for API calls
- Handle exceptions gracefully
- Provide meaningful error messages to users

## References

### Official Documentation:
- LINE Developers Documentation: https://developers.line.biz/en/docs/
- LINE Messaging API Overview: https://developers.line.biz/en/docs/messaging-api/overview/
- LINE Messaging API Reference: https://developers.line.biz/en/reference/messaging-api/
- LINE Bot SDK for Python: https://github.com/line/line-bot-sdk-python
- LINE Bot SDK Documentation: https://line-bot-sdk-python.readthedocs.io/en/stable/
- LINE Python SDK PyPI: https://pypi.org/project/line-bot-sdk/

### Webhook Resources:
- Webhooks Overview: https://developers.line.biz/en/docs/messaging-api/receiving-messages/
- Webhook Event Objects: https://developers.line.biz/en/reference/messaging-api/#webhook-event-objects
- Webhook Verification: https://developers.line.biz/en/docs/messaging-api/verify-webhook/

### Message Types Documentation:
- Message Types Overview: https://developers.line.biz/en/docs/messaging-api/message-types/
- Message Objects: https://developers.line.biz/en/reference/messaging-api/#message-objects
- Sticker List: https://developers.line.biz/en/docs/messaging-api/sticker-list/

### Rich Features Documentation:
- Rich Menu Documentation: https://developers.line.biz/en/docs/messaging-api/using-rich-menus/
- Flex Message Documentation: https://developers.line.biz/en/docs/messaging-api/using-flex-messages/
- Flex Message Simulator: https://developers.line.biz/console/fx/
- LINE Bot Designer: https://developers.line.biz/en/services/bot-designer/

### Tutorials and Guides:
- Getting Started with Messaging API: https://developers.line.biz/en/docs/messaging-api/getting-started/
- Building a LINE Bot with Python and Flask: https://medium.com/@kevinmatt/building-a-line-messenger-chatbot-with-flask-in-python-6cf0d0fffe91
- LINE Bot with Python and Heroku Tutorial: https://betterprogramming.pub/line-bot-with-python-and-heroku-tutorial-e8c296f3816f

### Community Resources:
- LINE Developers Community: https://community.line.me/en/
- LINE API Expert Program: https://www.line-community.me/en/apiexpert
- LINE Official GitHub: https://github.com/line

### Tools:
- ngrok: https://ngrok.com/docs
- Flask Documentation: https://flask.palletsprojects.com/
- Heroku Documentation: https://devcenter.heroku.com/
- Google Cloud Run Documentation: https://cloud.google.com/run/docs

### Example Projects:
- Official LINE SDK Examples: https://github.com/line/line-bot-sdk-python/tree/master/examples
- Flask Echo Example: https://github.com/line/line-bot-sdk-python/tree/master/examples/flask-echo
- Flask Kitchensink Example: https://github.com/line/line-bot-sdk-python/tree/master/examples/flask-kitchensink
- Community Example Project: https://github.com/louis70109/linebot-find-some
- LINE Bot with Flask Example: https://github.com/Kevin0901/Line_Bot_Flask_Example 